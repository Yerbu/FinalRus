import telebot
from telebot import types
import json

TOKEN = '7071803165:AAEGd5jbbHhM9wJuVQ8d77GEZfJeH40ENe4'
bot = telebot.TeleBot(TOKEN)

it_terms = {
    'Общий': {
        'Дебажить': '(от англ. “debug”) – находить и исправлять ошибки',
        'Парсить': '(от англ. “parse, partition”) – структурировать входную информацию',
        'Заранить': '(от англ. “run”) – запустить программу или приложение',
        'Дропнуть': '(от англ. “drop”) – удалить данные из Базы данных или удалить файл, сбросить состояние приложения',
        'Поднять': '(от англ. “lift”) – поднять приложение или База данных в рабочее состояние',
        'Прод': '(от англ. “Production”) – состояние, в котором приложение или База данных работает в продакшене или же сам продакшен',
        'Баг': '(от англ. "Bug") Ошибка в программе или приложении',
        'Сабмитнуть': '(от англ. “submit”) – отправить данные на сервер',
        'Фидбек': '(от англ. “feedback”) – обратная связь, комментарии, реакция на продукт или услугу',
        'Релиз': '(от англ. “release”) Выпуск новой версии программы или приложения',
        'Выкатить': '– выпустить новую версию программы или приложения',
    },
    'Связанные с Git': {
        'Гит': 'Система контроля версий, позволяющая отслеживать изменения в коде и сотрудничать с другими разработчиками',
        'Закоммитить': 'Фиксация изменений в репозитории',
        'Запушить': 'Отправка изменений в удаленный репозиторий',
        'Пулл': 'Получение изменений из удаленного репозитория',
        'Форкнуть': 'Копия репозитория в Git',
        'Мерджнуть': 'Объединение изменений из одной ветки в другую',
        'Конфликт': 'Ситуация, когда две ветки имеют изменения в одном и том же месте',
    },
    'Базы данных': {
        'БД': 'База данных, структурированное хранилище данных.',
        'Сикуел': 'Язык запросов для управления данными в БД. Примеры: MySQL, PostgreSQL, SQLite',
        'НоуСикуел': 'Категория баз данных, не использующих SQL-синтаксис для работы с данными. Примеры: MongoDB, Redis',
        'Дроп': 'Удаление объекта из БД или удаление самой БД',
        'Бекап': 'Резервное копирование данных для их восстановления в случае потери или повреждения',
    },
    "Системное администрирование": {
        "Винда": "Операционная система Windows",
        "Рут": "Получение полных административных прав в операционной системе или же главная корневая директория в файловой системе Linux",
        "Сервак": "Компьютер, предоставляющий ресурсы и услуги другим компьютерам. Примеры: Веб-сервер, почтовый сервер",
        "Бекап": "Резервное копирование данных для их восстановления в случае потери или повреждения",
        "СисАдмин": "Системный администратор, ответственный за обслуживание и поддержку компьютерной инфраструктуры",
        "Логи": "Журнал действий пользователя, записывающий в него информацию о действиях пользователя или системы",
        "Дрова": "Драйвера, программное обеспечение, обеспечивающее взаимодействие между операционной системой и устройством",
    },
    "Информационная безопасность": {
        "Шифровать": "Преобразование данных для защиты от несанкционированного доступа.", 
        "Снуппер": "Программа для перехвата и анализа сетевого трафика. Пример: Wireshark",
        "Мальварь": "(от англ. “malware”) – вредоносное программное обеспечение. Примеры: вирус, троян, червь",
        "Пентестить": "(от англ. “penetration test”) - Тестирование на проникновение. Пример: проверка на проникновение веб-приложения",
        "Фишинг": "Мошеннические попытки получить конфиденциальную информацию. Пример: письма от банков с просьбой ввести логин и пароль",
        "Ддос или дудосить": "Атака на сервер, направленная на перегрузку его ресурсов. Пример: атака на сайт, чтобы он перестал работать",
    },
    "Интернет вещей": { 
        "ИОТ": "(от англ. “Internet of Things”) Интернет вещей, технология, позволяющая устройствам обмениваться данными через интернет",
        "Умный дом": "Дом, оснащенный умными устройствами (освещение, термостаты, и тд). Примеры: Philips Hue, Nest",
        "Платформа": "Среда, предоставляющая инструменты для разработки и управления приложениями. Пример: AWS IoT, Google Cloud IoT Core",
        "Автоматизация": "Выполнение заданий без вмешательства человека. Пример: умный термостат подстраивает температуру",
    },
    "Алгоритмы и структуры данных": {
        "Сортировка": "Упорядочивание данных. Примеры: пузырьковая сортировка, быстрая сортировка", 
        "Массив": "Список элементов, упорядоченных по индексам. Пример: [10, 20, 30, 40]",
        "Связный список": "Последовательность элементов со ссылками. Пример: 10 -> 20 -> 30",
        "Стек": "Структура данных, работающая по принципу последним пришел - первым вышел (LIFO). Примеры: undo/redo операции в программировании",
        "Спагетти код": "Код, сложный для понимания из-за большого количества ветвлений и условий",
        "Дерево": "Структура данных, представляющая собой древовидную структуру. Пример: дерево каталогов в файловой системе",
        "АДС": "Сокращение от “Алгоритмы и структуры данных” (Algorithms and Data Structures)",
    },
    "Игры и Разработка игр": { 
        "Про": "Профессиональный игрок, обладающий высоким уровнем мастерства в игре.",
        "Нуб": "Не профессиональный игрок, обладающий низким уровнем мастерства в игре.",
        "Хил": "Игровой персонаж, способный восстанавливать здоровье других персонажей, или же способность восстанавливать здоровье.",
        "Флуд": "Массовое сообщение в чате, направленное на нарушение общения в чате.",
        "ЭнПиСи": "(от англ. “NPC”) – Неигровой персонаж, контролируемый компьютером. Пример: монстры, торговцы",
        "Дамаг": "Урон, наносимый игровым персонажем.",
        "Гейм дизайн": "Процесс создания игрового контента и механик.",
        "Механики": "Игровые правила и системы, определяющие игровой процесс.",
    },
    "Облачные вычисления": {
        "СААС": "Предоставление программного обеспечения как онлайн-сервиса. Примеры: Google Docs, Salesforce",
        "ПААС": "Платформы, предоставляющие среду и инструменты для разработки, тестирования и развертывания приложений. Примеры: Heroku, Google App Engine",
        "АЙААС": "Предоставление инфраструктуры в виде виртуальных машин, сетей и хранилищ. Примеры: AWS EC2, Google Compute Engine",
        "Облака": "Группа серверов, предоставляющих вычислительные ресурсы через интернет. Примеры: AWS, Google Cloud, Azure",
    }  
}

def create_main_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    for index, topic in enumerate(it_terms.keys()):
        callback_data = json.dumps({'action': 'topic', 'index': index})
        keyboard.add(types.InlineKeyboardButton(text=topic, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="Поиск 🔍", callback_data=json.dumps({'action': 'search'})))
    return keyboard

def create_terms_keyboard(topic_index):
    keyboard = types.InlineKeyboardMarkup()
    topic_name = list(it_terms.keys())[topic_index]
    for index, term in enumerate(it_terms[topic_name].keys()):
        callback_data = json.dumps({'action': 'term', 'topic_index': topic_index, 'term_index': index})
        keyboard.add(types.InlineKeyboardButton(text=term, callback_data=callback_data))
    keyboard.add(types.InlineKeyboardButton(text="Назад ↩️", callback_data=json.dumps({'action': 'back'})))
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "Выберите тематику IT-терминов или воспользуйтесь поиском:", reply_markup=create_main_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    data = json.loads(call.data)
    action = data['action']
    
    if action == 'topic':
        topic_index = data['index']
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Выберите термин:", reply_markup=create_terms_keyboard(topic_index))
    elif action == 'term':
        topic_index, term_index = data['topic_index'], data['term_index']
        topic_name = list(it_terms.keys())[topic_index]
        term_name = list(it_terms[topic_name].keys())[term_index]
        description = it_terms[topic_name][term_name]
        bot.send_message(call.message.chat.id, f"{term_name}: {description}")
    elif action == 'back':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Выберите тематику IT-терминов или воспользуйтесь поиском:", reply_markup=create_main_keyboard())
    elif action == 'search':
        msg = bot.send_message(call.message.chat.id, "Введите термин для поиска:")
        bot.register_next_step_handler(msg, perform_search)

def perform_search(message):
    query = message.text.lower()
    results = "Результаты поиска:\n"
    found = False
    for topic, terms in it_terms.items():
        for term, description in terms.items():
            if query in term.lower():
                results += f"\n{term}: {description}\n"
                found = True
    if not found:
        results = "Ошибка: термин не найден."
    bot.send_message(message.chat.id, results)

bot.polling(none_stop=True)
